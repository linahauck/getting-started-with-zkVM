// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{OVER18_ELF, OVER18_ID};
// hello-world/src/lib.rs
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt}; 
// ExecutorEnv is responsible for managing guest-readable memory.
// The host makes the value input available to the guest program before execution by adding input to the executor environment.



fn main(){
    let input: u32 = 43;

    let result: bool = zkvm(input).is_ok();

    println!("is ok? {}", result);

    assert!(result);
}

fn zkvm(input: u32) -> Result<(), ()> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, OVER18_ELF)
        .unwrap();

    // extract the receipt.
    let receipt: Receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(OVER18_ID)
        .unwrap();

    Ok(())
}


//cmd to run tests: cargo test 
#[cfg(test)]
mod tests {
    use super::*;
    use rand::Rng;

    #[test]
    fn is_18() {
        let age : u32 = 18;
        assert!(zkvm(age).is_ok());
    }

    #[test]
    fn is_over_18() {
        let age: u32 = rand::thread_rng().gen_range(19..100);
        println!("age: {}", age);
        assert!(zkvm(age).is_ok());
    }
}


