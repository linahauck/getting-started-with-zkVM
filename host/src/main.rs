use anyhow::Result;
use host::not_underage;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{OVER18_ID};
// ExecutorEnv is responsible for managing guest-readable memory.
// The host makes the value input available to the guest program before execution by adding input to the executor environment.
use std::sync::Once;

static TRACING_INIT: Once = Once::new();

fn main() -> Result<()> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    TRACING_INIT.call_once(|| {
        tracing_subscriber::fmt()
            .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
            .init();
    });


    let result = not_underage(32);

    // Option 1
    match result {
        Ok(receipt) => {
            let journal: String = receipt.journal.decode().expect(
            "ERROR: Occured while deserializing journal output. It should deserialize into the same types (& order) that it was written",
            );

            receipt.verify(OVER18_ID).expect(
                "ERROR: Occured while verfifying receipt. Image ID might be wrong.",
            );

            println!("{journal}");
            },
        Err(e) => eprintln!("{e}"),
    }

    // Option 2
    // let receipt = result?;

    // let journal: String = receipt.journal.decode().expect(
    //         "ERROR: Occured while deserializing journal output. It should deserialize into the same types (& order) that it was written",
    // );

    // receipt.verify(OVER18_ID).expect(
    //     "ERROR: Occured while verfifying receipt. Image ID might be wrong.",
    // );

    // println!("VALID PROOF: {}", journal);


    Ok(())

}
